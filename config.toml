# The global section has parameters that apply globally to the relayer operation.
[global]

# Specify the verbosity for the relayer logging output. Default: 'info'
# Valid options are 'error', 'warn', 'info', 'debug', 'trace'.
log_level = 'info'


# Specify the mode to be used by the relayer. [Required]
[mode]

# Specify the client mode.
[mode.clients]

# Whether or not to enable the client workers. [Required]
enabled = true

# Whether or not to enable periodic refresh of clients. [Default: true]
# This feature only applies to clients that underlie an open channel.
# For Tendermint clients, the frequency at which Hermes refreshes them is 2/3 of their
# trusting period (e.g., refresh every ~9 days if the trusting period is 14 days).
# Note: Even if this is disabled, clients will be refreshed automatically if
#      there is activity on a connection or channel they are involved with.
refresh = true

# Whether or not to enable misbehaviour detection for clients. [Default: false]
misbehaviour = false

# Specify the connections mode.
[mode.connections]

# Whether or not to enable the connection workers for handshake completion. [Required]
enabled = false

# Specify the channels mode.
[mode.channels]

# Whether or not to enable the channel workers for handshake completion. [Required]
enabled = false

# Specify the packets mode.
[mode.packets]

# Whether or not to enable the packet workers. [Required]
enabled = true

# Parametrize the periodic packet clearing feature.
# Interval (in number of blocks) at which pending packets
# should be periodically cleared. A value of '0' will disable
# periodic packet clearing. [Default: 100]
clear_interval = 1

# Whether or not to clear packets on start. [Default: false]
clear_on_start = true

# Toggle the transaction confirmation mechanism.
# The tx confirmation mechanism periodically queries the `/tx_search` RPC
# endpoint to check that previously-submitted transactions
# (to any chain in this config file) have been successfully delivered.
# If they have not been, and `clear_interval = 0`, then those packets are
# queued up for re-submission.
# If set to `false`, the following telemetry metrics will be disabled:
# `acknowledgment_packets_confirmed`, `receive_packets_confirmed` and `timeout_packets_confirmed`.
# [Default: false]
tx_confirmation = false

# The REST section defines parameters for Hermes' built-in RESTful API.
# https://hermes.informal.systems/rest.html
[rest]

# Whether or not to enable the REST service. Default: false
enabled = true

# Specify the IPv4/6 host over which the built-in HTTP server will serve the RESTful
# API requests. Default: 127.0.0.1
host = '127.0.0.1'

# Specify the port over which the built-in HTTP server will serve the restful API
# requests. Default: 3000
port = 3000


# The telemetry section defines parameters for Hermes' built-in telemetry capabilities.
# https://hermes.informal.systems/telemetry.html
[telemetry]

# Whether or not to enable the telemetry service. Default: false
enabled = true

# Specify the IPv4/6 host over which the built-in HTTP server will serve the metrics
# gathered by the telemetry service. Default: 127.0.0.1
host = '127.0.0.1'

# Specify the port over which the built-in HTTP server will serve the metrics gathered
# by the telemetry service. Default: 3001
port = 3001


# A chains section includes parameters related to a chain and the full node to which
# the relayer can send transactions and queries.
#[[chains]]

# Specify the chain ID. Required
#id = 'wasmd-1'

# Specify the RPC address and port where the chain RPC server listens on. Required
#rpc_addr = 'http://127.0.0.1:26659'

# Specify the GRPC address and port where the chain GRPC server listens on. Required
#grpc_addr = 'http://127.0.0.1:9090'

# Specify the WebSocket address and port where the chain WebSocket server
# listens on. Required
#websocket_addr = 'ws://127.0.0.1:26659/websocket'

# Specify the maximum amount of time (duration) that the RPC requests should
# take before timing out. Default: 10s (10 seconds)
# Note: Hermes uses this parameter _only_ in `start` mode; for all other CLIs,
# Hermes uses a large preconfigured timeout (on the order of minutes).
#rpc_timeout = '10s'

# Specify the prefix used by the chain. Required
#account_prefix = 'wasm'

# Specify the name of the private key to use for signing transactions. Required
# See the Adding Keys chapter for more information about managing signing keys:
#   https://hermes.informal.systems/commands/keys/index.html#adding-keys
#key_name = 'relayer1'

# Specify the address type which determines:
# 1) address derivation;
# 2) how to retrieve and decode accounts and pubkeys;
# 3) the message signing method.
# The current configuration options are for Cosmos SDK and Ethermint.
#
# Example configuration for chains based on Ethermint library:
#
# address_type = { derivation = 'ethermint', proto_type = { pk_type = '/ethermint.crypto.v1.ethsecp256k1.PubKey' } }
#
# Default: { derivation = 'cosmos' }, i.e. address derivation as in Cosmos SDK.
# Warning: This is an advanced feature! Modify with caution.
#address_type = { derivation = 'cosmos' }

# Specify the store prefix used by the on-chain IBC modules. Required
# Recommended value for Cosmos SDK: 'ibc'
#store_prefix = 'ibc'

# Specify the default amount of gas to be used in case the tx simulation fails,
# and Hermes cannot estimate the amount of gas needed.
# Default: 100 000
#default_gas = 0

# Specify the maximum amount of gas to be used as the gas limit for a transaction.
# If `default_gas` is unspecified, then `max_gas` will be used as `default_gas`.
# Default: 400 000
#max_gas = 40000000

# Specify the price per gas used of the fee to submit a transaction and
# the denomination of the fee. Required
#gas_price = { price = 0.1, denom = 'ucosm' }

# Multiply this amount with the gas estimate, used to compute the fee
# and account for potential estimation error.
#
# Example: With this setting set to 1.1, then if the estimated gas
# is 80_000, then gas used to compute the fee will be adjusted to
# 80_000 * 1.1 = 88_000.
#
# Default: 1.1, ie. the gas is increased by 10%
# Minimum value: 1.0
#gas_multiplier = 1.1

# Specify how many IBC messahostges at most to include in a single transaction.
# Default: 30
#max_msg_num = 30

# Specify the maximum size, in bytes, of each transaction that Hermes will submit.
# Default: 2097152 (2 MiB)
#max_tx_size = 2097152

# Specify the maximum amount of time to tolerate a clock drift.
# The clock drift parameter defines how much new (untrusted) header's time
# can drift into the future. Default: 5s
#clock_drift = '5s'

# Specify the maximum time per block for this chain.
# The block time together with the clock drift are added to the source drift to estimate
# the maximum clock drift when creating a client on this chain. Default: 30s
# For cosmos-SDK chains a good approximation is `timeout_propose` + `timeout_commit`
# Note: This MUST be the same as the `max_expected_time_per_block` genesis parameter for Tendermint chains.
#max_block_time = '30s'

# Specify the amount of time to be used as the light client trusting period.
# It should be significantly less than the unbonding period
# (e.g. unbonding period = 3 weeks, trusting period = 2 weeks).
# Default: 2/3 of the `unbonding period` for Cosmos SDK chains
#trusting_period = '14days'

# Specify the trust threshold for the light client, ie. the maximum fraction of validators
# which have changed between two blocks.
# Default: { numerator = '1', denominator = '3' }, ie. 1/3.
# Warning: This is an advanced feature! Modify with caution.
#trust_threshold = { numerator = '1', denominator = '3' }

# Specify a string that Hermes will use as a memo for each transaction it submits
# to this chain. The string is limited to 50 characters. Default: '' (empty).
# Note: Hermes will append to the string defined here additional
# operational debugging information, e.g., relayer build version.
#memo_prefix = ''

# This section specifies the filters for policy based relaying.
#
# Default: no policy / filters, allow all packets on all channels.
#
# Only packet filtering based on channel identifier can be specified.
# A channel filter has two fields:
# 1. `policy` - one of two types are supported:
#       - 'allow': permit relaying _only on_ the port/channel id in the list below,
#       - 'deny': permit relaying on any channel _except for_ the list below.
# 2. `list` - the list of channels specified by the port and channel identifiers.
#             Optionally, each element may also contains wildcards, for eg. 'ica*'
#             to match all identifiers starting with 'ica' or '*' to match all identifiers.
#
# Example configuration of a channel filter, only allowing packet relaying on
# channel with port ID 'transfer' and channel ID 'channel-0', as well as on
# all ICA channels.
#
# [chains.packet_filter]
# policy = 'allow'
# list = [
#   ['ica*', '*'],
#   ['transfer', 'channel-0'],
# ]

# Specify that the transaction fees should be payed from this fee granter's account.
# Optional. If unspecified (the default behavior), then no fee granter is used, and
# the account specified in `key_name` will pay the tx fees for all transactions
# submitted to this chain.
# fee_granter = ''

[[chains]]
id = 'elgafar-1'
rpc_addr = 'https://rpc.elgafar-1.stargaze-apis.com:443'
grpc_addr = 'http://grpc-1.elgafar-1.stargaze-apis.com:26660/'
websocket_addr = 'wss://rpc.elgafar-1.stargaze-apis.com:443/websocket'
rpc_timeout = '10s'
account_prefix = 'stars'
key_name = 'gon_stargaze_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
default_gas = 100000
max_gas = 4000000
gas_price = { price = 0.1, denom = 'ustars' }
gas_multiplier = 1.1
max_msg_num = 30
max_tx_size = 2097152
clock_drift = '5s'
max_block_time = '30s'
trusting_period = '1209599s' # 14 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'cosmos' }

[chains.packet_filter]
policy = 'allow'
list = [
  # Stargaze ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-223'], # counterparty: ics721 on Juno, channel-102
  ['*', 'channel-224'], # counterparty: ics721 on Osmosis, channel-2674
  ['*', 'channel-225'], # counterparty: nft module on IRISnet, channel-31
  ['*', 'channel-226'], # counterparty: nft module on Omniflix, channel-51
  ['*', 'channel-227'], # counterparty: nft module on Uptick, channel-18
]

[[chains]]
id = 'uni-6'
rpc_addr = 'https://rpc.uni.junonetwork.io/'
grpc_addr = 'http://juno-testnet-grpc.polkachu.com:12690'
websocket_addr = 'wss://rpc.uni.junonetwork.io/websocket'
rpc_timeout = '10s'
account_prefix = 'juno'
key_name = 'gon_juno_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
default_gas = 100000
max_gas = 4000000
gas_price = { price = 0.1, denom = 'ujunox' }
gas_multiplier = 1.1
max_msg_num = 30
max_tx_size = 2097152
clock_drift = '5s'
max_block_time = '30s'
trusting_period = '2419199s' # 28 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'cosmos' }

[chains.packet_filter]
policy = 'allow'
list = [
  # Juno ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-102'], # counterparty: ics721 on Stargaze, channel-223
  ['*', 'channel-104'], # counterparty: ics721 on Osmosis, channel-2676
  ['*', 'channel-105'], # counterparty: nft module on IRISnet, channel-32
  ['*', 'channel-106'], # counterparty: nft module on Uptick, channel-19
  ['*', 'channel-107'], # counterparty: nft module on OmniFlix, channel-52
]

[[chains]]
id = 'osmo-test-4'
rpc_addr = 'https://rpc.testnet.osmosis.zone:443'
grpc_addr = 'http://grpc-test.osmosis.zone:443'
websocket_addr = 'wss://rpc.testnet.osmosis.zone:443/websocket'
rpc_timeout = '10s'
account_prefix = 'osmo'
key_name = 'gon_osmosis_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
default_gas = 5000000
max_gas = 15000000
gas_price = { price = 0.01, denom = 'uosmo' }
gas_multiplier = 1.1
max_msg_num = 20
max_tx_size = 2097152
clock_drift = '5s'
max_block_time = '10s'
trusting_period = '1209599s' # 18 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'cosmos' }

[chains.packet_filter]
policy = 'allow'
list = [
  # Osmosis ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-2674'], # counterparty: ics721 on Stargaze, channel-224
  ['*', 'channel-2676'], # counterparty: ics721 on Juno, channel-104
  ['*', 'channel-2678'], # counterparty: nft module on IRISnet, channel-33
  ['*', 'channel-2680'], # counterparty: nft module on Uptick, channel-20
  ['*', 'channel-2679'], # counterparty: nft module on OmniFlix, channel-53
]

[[chains]]
id = 'gon-irishub-1'
rpc_addr = 'http://34.80.93.133:26657'
grpc_addr = 'http://34.80.93.133:9090'
websocket_addr = 'ws://34.80.93.133:26657/websocket'
rpc_timeout = '10s'
account_prefix = 'iaa'
key_name = 'gon_irisnet_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
default_gas = 100000
max_gas = 5000000
gas_price = { price = 0.025, denom = 'uiris' }
gas_multiplier = 1.5
max_msg_num = 30
max_tx_size = 2097152
clock_drift = '10s'
max_block_time = '10s'
trusting_period = '259199s' # 3 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'cosmos' }

[chains.packet_filter]
policy = 'allow'
list = [
  # IRISnet ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-31'], # counterparty: ics721 on Stargaze, channel-225
  ['*', 'channel-32'], # counterparty: ics721 on Juno, channel-105
  ['*', 'channel-33'], # counterparty: ics721 on Osmosis, channel-2678
  ['*', 'channel-35'], # counterparty: nft module on Uptick, channel-21
  ['*', 'channel-34'], # counterparty: nft module on OmniFlix, channel-54
]

[[chains]]
id = 'uptick_7000-2'
rpc_addr = 'http://52.220.252.160:26657'
grpc_addr = 'http://52.220.252.160:9090'
websocket_addr = 'ws://52.220.252.160:26657/websocket'
rpc_timeout = '10s'
account_prefix = 'uptick'
key_name = 'gon_uptick_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
default_gas = 10000000000000
max_gas = 10000000000000
gas_price = { price = 0.01, denom = 'auptick' }
gas_multiplier = 2
max_msg_num = 30
max_tx_size = 2097152
clock_drift = '5s'
max_block_time = '10s'
trusting_period = '1814399s' # 21 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'ethermint', proto_type = { pk_type = '/ethermint.crypto.v1.ethsecp256k1.PubKey' } }

[chains.packet_filter]
policy = 'allow'
list = [
  # Uptick ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-18'], # counterparty: ics721 on Stargaze, channel-227
  ['*', 'channel-19'], # counterparty: ics721 on Juno, channel-106
  ['*', 'channel-20'], # counterparty: ics721 on Osmosis, channel-2680
  ['*', 'channel-21'], # counterparty: nft module on IRISnet, channel-35
  ['*', 'channel-22'], # counterparty: nft module on OmniFlix, channel-55
]

[[chains]]
id = 'gon-flixnet-1'
rpc_addr = 'http://65.21.93.56:26657'
grpc_addr = 'http://65.21.93.56:9090'
websocket_addr = 'ws://65.21.93.56:26657/websocket'
rpc_timeout = '10s'
account_prefix = 'omniflix'
key_name = 'gon_omniflix_relayer_wallet' # as defined in nodes.env!
store_prefix = 'ibc'
max_gas = 2000000
gas_price = { price = 0.001, denom = 'uflix' }
gas_multiplier = 1.1
clock_drift = '5s'
trusting_period = '1814399s' # 21 days (unbonding period) minus 1 sec
trust_threshold = { numerator = '1', denominator = '3' }
address_type = { derivation = 'cosmos'}

[chains.packet_filter]
policy = 'allow'
list = [
  # Omniflix ICS721 channels
  # - Game of NFTs channels
  ['*', 'channel-51'], # counterparty: ics721 on Stargaze, channel-226
  ['*', 'channel-52'], # counterparty: ics721 on Juno, channel-107
  ['*', 'channel-53'], # counterparty: ics721 on Osmosis, channel-2679
  ['*', 'channel-54'], # counterparty: nft module on IRISnet, channel-34
  ['*', 'channel-55'], # counterparty: nft module on Uptick, channel-22
]
